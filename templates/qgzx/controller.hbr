package {{prop.controllerPackageName}};

import java.util.List;
import com.qgzx.common.utils.poi.ExcelUtil;
import com.qgzx.framework.web.page.TableDataInfo;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.qgzx.framework.aspectj.lang.annotation.Log;

import org.springframework.security.access.prepost.PreAuthorize;
import {{prop.entityPackageName}}.{{table.tableName}};
import {{prop.servicePackageName}}.{{table.tableName}}Service;
import com.qgzx.framework.web.validator.groups.AddGroup;
import com.qgzx.framework.web.validator.groups.DefaultGroup;
import com.qgzx.framework.web.validator.groups.EditGroup;
import com.qgzx.framework.web.controller.BaseController;
import com.qgzx.framework.aspectj.lang.enums.BusinessType;
import com.qgzx.framework.web.domain.AjaxResult;

@RequestMapping("/{{prop.modulesName}}")
@RestController
@Api(tags = "{{table.remarks}}")
public class {{table.tableName}}Controller extends BaseController {
    @Autowired
    private {{table.tableName}}Service {{table.tableNameLower}}Service;

    /**
    * 根据ID查询{{table.remarks}}
    * @param id
    * @return
    */
    @ApiOperation(value = "根据ID查询{{table.remarks}}",notes = "根据ID进行{{table.remarks}}查询，id不可为空。",position = 1)
    @ApiImplicitParam(name = "id", value = "{{table.remarks}}ID", required = true, dataType = "long", paramType = "path")
    @PreAuthorize("@ss.hasPermi('{{table.permissions}}:query')")
    @GetMapping("/{{table.tableNamePluralize}}/{id}")
    public AjaxResult findById(@PathVariable("id") Long id){
        return AjaxResult.success({{table.tableNameLower}}Service.get(id));
    }

    /**
    * 获取所有{{table.remarks}}数据。分页情况下：入参含有pagenum和pagesize即可，如若排序另加入入参为ordercolumn和sort
    * @param {{table.tableNameLower}}
    * @return
    */
    @ApiOperation(value = "获取所有或分页获取{{table.remarks}}数据",notes = "分页情况下：入参含有pagenum和pagesize即可，如若排序另加入入参为ordercolumn和sort",position = 2)
    @ApiImplicitParams({
        @ApiImplicitParam(name = "pagenum", value = "页码数（分页下使用）", required = false, dataType = "int", paramType = "query"),
        @ApiImplicitParam(name = "pagesize", value = "每页条数（分页下使用）", required = false, dataType = "int", paramType = "query"),
        @ApiImplicitParam(name = "ordercolumn", value = "排序列（分页下使用）", required = false, dataType = "string", paramType = "query"),
        @ApiImplicitParam(name = "sort", value = "排序顺序（分页下使用，升序：asc；降序：desc）", required = false, dataType = "string", paramType = "query",allowableValues = "asc,desc")
    })
    @PreAuthorize("@ss.hasPermi('{{table.permissions}}:list')")
    @GetMapping("/{{table.tableNamePluralize}}")
    public TableDataInfo findAll({{table.tableName}} {{table.tableNameLower}}){
        startPage();
        List<{{table.tableName}}> list = {{table.tableNameLower}}Service.getByDynamicWhere({{table.tableNameLower}});
        return getDataTable(list);
    }

    /**
    * 新增{{table.remarks}}
    * @param {{table.tableNameLower}}
    * @return
    */
    @ApiOperation(value = "新增{{table.remarks}}",notes = "新增一个{{table.remarks}}",position = 20)
    @PreAuthorize("@ss.hasPermi('{{table.permissions}}:add')")
    @Log(title = "{{table.remarks}}", businessType = BusinessType.INSERT)
    @PostMapping("/{{table.tableNamePluralize}}")
    public AjaxResult save(@Validated({DefaultGroup.class,AddGroup.class}) {{table.tableName}} {{table.tableNameLower}}){
        return toAjax({{table.tableNameLower}}Service.save({{table.tableNameLower}}));
    }

    /**
    * 修改{{table.remarks}}
    * @param {{table.tableNameLower}}
    * @return
    */
    @ApiOperation(value = "修改{{table.remarks}}",notes = "修改{{table.remarks}}数据",position = 30)
    @PreAuthorize("@ss.hasPermi('{{table.permissions}}:edit')")
    @Log(title = "{{table.remarks}}", businessType = BusinessType.UPDATE)
    @PutMapping("/{{table.tableNamePluralize}}")
    public AjaxResult update(@Validated({DefaultGroup.class,EditGroup.class}) {{table.tableName}} {{table.tableNameLower}}){
        return toAjax({{table.tableNameLower}}Service.update({{table.tableNameLower}}));
    }

    /**
    * 动态修改{{table.remarks}}[常用于更新个别字段，比如审核状态、数据状态等]
    * @param {{table.tableNameLower}}
    * @return
    */
    @ApiOperation(value = "动态修改{{table.remarks}}",notes = "常用于更新个别字段，比如审核状态、数据状态等",position = 31)
    @PreAuthorize("@ss.hasPermi('{{table.permissions}}:edit')")
    @Log(title = "{{table.remarks}}", businessType = BusinessType.UPDATE)
    @PutMapping("/{{table.tableNameSelectivePluralize}}")
    public AjaxResult updateSelective({{table.tableName}} {{table.tableNameLower}}){
        return toAjax({{table.tableNameLower}}Service.updateSelective({{table.tableNameLower}}));
    }

    /**
    * 根据ID删除{{table.remarks}}
    * @param id
    * @return
    */
    @ApiOperation(value = "删除{{table.remarks}}",notes = "根据ID删除{{table.remarks}}",position = 50)
    @ApiImplicitParam(name = "id", value = "{{table.remarks}}ID", required = true, dataType = "long", paramType = "path")
    @PreAuthorize("@ss.hasPermi('{{table.permissions}}:remove')")
    @Log(title = "{{table.remarks}}", businessType = BusinessType.DELETE)
    @DeleteMapping("/{{table.tableNamePluralize}}/{id}")
    public AjaxResult delete(@PathVariable("id") Long id){
        return toAjax({{table.tableNameLower}}Service.delete(id));
    }

    /**
     * 导出{{table.remarks}}
     */
    @ApiOperation(value = "导出{{table.remarks}}",position = 40)
    @PreAuthorize("@ss.hasPermi('{{table.permissions}}:export')")
    @Log(title = "{{table.remarks}}", businessType = BusinessType.EXPORT)
    @GetMapping("/{{table.tableNamePluralize}}/export")
    public AjaxResult export({{table.tableName}} {{table.tableNameLower}})
    {
        List<{{table.tableName}}> list = {{table.tableNameLower}}Service.getByDynamicWhere({{table.tableNameLower}});
        ExcelUtil<{{table.tableName}}> util = new ExcelUtil<{{table.tableName}}>({{table.tableName}}.class);
        return util.exportExcel(list, "{{table.tableNameLower}}");
    }
}